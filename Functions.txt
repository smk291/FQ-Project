function initAutocomplete() {
  var controlDiv1 = document.createElement('div'); // This creates the first autocompete input
  var input2 = document.getElementById('origin');
  input2.style.placeholder = 'Origin';
  input2.style.paddingLeft = '10px';
  var searchBox2 = new google.maps.places.SearchBox(input2);
  searchBox2.addListener('places_changed', function (event) {
    // event.preventDefault();
    coordinates[0] = searchBox2.getPlaces()[0].formatted_address;
    // console.log(searchBox2.getPlaces());
    console.log(searchBox2.getPlaces()[0].formatted_address);
    if (typeof coordinates[0] === 'string' && typeof coordinates[1] === 'string') {
      // debugger;
      // $('#map-canvas').empty();
      // initialize();
      // initAutocomplete();
    }
  })
  controlDiv1.style.boxShadow = '0 12px 15px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19)';
  controlDiv1.style.marginTop = '.5%';
  controlDiv1.style.marginLeft = '.5%';
  controlDiv1.appendChild(input2);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(controlDiv1);
  document.getElementById('search').appendChild(controlDiv1);

  var controlDiv2 = document.createElement('div'); // This creates the second
  var input3 = document.getElementById('destination');
  input3.style.paddingLeft = '10px';
  input3.style.left = '325px';
  var searchBox3 = new google.maps.places.SearchBox(input3);
  searchBox3.addListener('places_changed', function () {
    // event.preventDefault();
    // console.log(searchBox3.getPlaces());
    console.log(searchBox3.getPlaces()[0].formatted_address);
    coordinates[1] = searchBox3.getPlaces()[0].formatted_address;
    if (typeof coordinates[0] === 'string' && typeof coordinates[1] === 'string') {
      // debugger;
      // $('#map-canvas').empty();
      // initialize();
      // initAutocomplete();
    }
  })
  controlDiv2.style.boxShadow = '0 12px 15px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19)';
  controlDiv2.style.marginTop = '.5%';
  controlDiv2.style.marginLeft = '.5%';
  controlDiv2.style.left = '325px';
  controlDiv2.appendChild(input3);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(controlDiv2);
  document.getElementById('search').appendChild(controlDiv2);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(controlDiv2);

  var controlDiv3 = document.createElement('div'); // This creates the search button
  var searchButton = document.createElement('button');
  searchButton.className = 'btn waves-effect waves-light';
  searchButton.setAttribute('type', 'submit');
  searchButton.setAttribute('name', 'action');
  searchButton.style.top = '5px';
  searchButton.id = 'searchButton';
  var searchIcon = document.createElement('i');
  searchIcon.className = "material-icons center";
  searchIcon.textContent = "send";
  searchButton.appendChild(searchIcon);
  controlDiv3.appendChild(searchButton);
  controlDiv3.style.marginTop = '.5%';
  controlDiv3.style.marginLeft = '.5%';
  controlDiv3.style.left = '650px';
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(controlDiv3);
  document.getElementById('search').appendChild(controlDiv3);

  searchBox2.addListener('places_changed', function () {
    var places = searchBox2.getPlaces();
    if (places.length == 0) {
      return;
    }
  });
  searchBox3.addListener('places_changed', function () {
    var places = searchBox3.getPlaces();

    if (places.length == 0) {
      return;
    }
  });
}


function initialize() { //  ---->  This is the primary map and directions generating function
  var mapOptions = { // Sets initial conditions for map
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      center: {
        lat: 47.59916,
        lng: -122.333689
      },
      zoom: 13
    }
    // initAutocomplete();
  map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions); //Create map at #map-canvas
  directionsService = new google.maps.DirectionsService(); //Initialize directions service
  calcRoute();
  initMap();
}

function calcRoute() { // ----> Calculate route using user-selected addresses
  var request = {
    origin: coordinates[0],
    destination: coordinates[1],
    travelMode: google.maps.TravelMode.WALKING // >>>>>>>>>>> SET OPTION
  };

  // coordinates[0] = $('#origin').val();
  // coordinates[1] = $('#destination').val();                                       // console.log(coordinates);

  directionsService.route(request, function (response, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      map.fitBounds(response.routes[0].bounds);
      createPolyline(response);
    }
  });
}

function createPolyline(directionResult) { // ----> This function creates polyLines
  latitudes = []; // Array storing list of latitudes
  longitudes = []; // Array storing list of all longitudes -- equal in length to latitude list
  var line = new google.maps.Polyline({ // This draws lines between parts of directions; I've disabled it for now
    path: directionResult.routes[0].overview_path,
    strokeColor: '#0000FF',
    strokeOpacity: 0.5,
    strokeWeight: 10
  });

  console.log(directionResult.routes[0])

  line.setMap(map);

  for (var i = 0; i < line.getPath().length; i++) { // Loop returns and stores latitudes and longitudes; I should filter these according to distance
    console.log(line.getPath().getAt(i));
    console.log(line.getPath().getAt(i).lat(arguments)); // Latitude -- difficult to figure out how to retrieve
    latitudes.push(line.getPath().getAt(i).lat(arguments))
    console.log(line.getPath().getAt(i).lng(arguments)); // Longitude -- difficult to figure out how to retrieve
    longitudes.push(line.getPath().getAt(i).lng(arguments))
  }

  var totalDistance = 0;
  var minuteCount = 0;
  directionsCenterLatitude = (latitudes[0] + latitudes[latitudes.length - 1]) / 2; // Store average of start latitude and end latitude
  directionsCenterLongitude = (longitudes[0] + longitudes[longitudes.length - 1]) / 2; //Store average of start longitude and end longitude
  getForecastIO(directionsCenterLatitude, directionsCenterLongitude);
  var distanceStorage = 0;
  for (var i = 0; i < latitudes.length; i++) {
    var distanceBetween = earthDistance({
      lat: latitudes[i],
      lon: longitudes[i]
    }, {
      lat: latitudes[i + 1],
      lon: longitudes[i + 1]
    }) * 5280;
    if (i === latitudes.length - 1) {
      distanceBetween = 0;
    }
    if ((distanceBetween + distanceStorage) > 545.6004 || i === 0 || i === latitudes.length - 1) {
      if ((distanceBetween + distanceStorage) > 545.6004) {
        distanceStorage = 0;
      } else {
        distanceStorage += distanceBetween;
      }
      // console.log("It's above the limit.")
      minuteCount = Math.round(totalDistance / 545.6004) * 2;
      console.log("MinuteCount: " + minuteCount);
      console.log(distanceStorage);
      totalDistance += distanceBetween;
      console.log("TotalDistance: " + totalDistance)
      distanceStorage = distanceStorage % 545.6004;
      console.log("New distanceStorage is: " + distanceStorage);
      var marker = new google.maps.Marker({ // Create marker when distanceStorage exceeds 272.80002
        icon: {
          path: google.maps.SymbolPath.CIRCLE,
          scale: 3
        },
        position: line.getPath().getAt(i),
        map: map
      });
      // weatherlisting.appendChild(minutelyData[minuteCount]);
    } else {
      console.log("It's below the limit");
      distanceStorage += distanceBetween;
      console.log("New distanceStorage is: " + distanceStorage);
      totalDistance += distanceBetween;
      console.log("TotalDistance: " + totalDistance)
    }
  }
}
